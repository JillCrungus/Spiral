package org.abimon.spiral.core.formats.models

import org.abimon.spiral.core.formats.SpiralFormat
import org.abimon.spiral.core.objects.models.GMOMeshFacesChunk
import org.abimon.spiral.core.objects.models.GMOModel
import org.abimon.spiral.core.objects.models.GMOVertexArrayChunk
import org.abimon.spiral.core.readString
import org.abimon.spiral.mvc.gurren.Gurren
import org.abimon.visi.io.DataSource
import java.io.OutputStream
import java.io.PrintStream

object GMOModelFormat: SpiralFormat {
    override val name: String = "GMO"
    override val extension: String? = "gmo"
    override val conversions: Array<SpiralFormat> = arrayOf(OBJModelFormat)

    override fun isFormat(source: DataSource): Boolean = source.use { stream -> stream.readString(12) == "OMG.00.1PSP\u0000" }

    override fun convert(format: SpiralFormat, source: DataSource, output: OutputStream, params: Map<String, Any?>): Boolean {
        if(super.convert(format, source, output, params)) return true

        val gmo = GMOModel(source)
        when(format) {
            is OBJModelFormat -> {
                val out = PrintStream(output)

                val vertices = gmo.findChunk(GMOVertexArrayChunk::class)
                val faces = gmo.findChunk(GMOMeshFacesChunk::class)

                out.println("# SPIRAL v${Gurren.version}")
                out.println("# Autogenerated")
                out.println()

                if(vertices != null) {
                    vertices.vertices.forEach { (x, y, z) -> out.println("v $x $y $z") }
                    vertices.uvs.forEach { (u, v) -> out.println("vt $u $v") }
                }

                if(faces != null) {
                    when(faces.primType) {
                        3L -> faces.faces.forEach { (a, b, c) -> out.println("f ${a + 1} ${b + 1} ${c + 1}") }
                        4L -> faces.faces.forEach { (a, b, c, d) ->
                            out.println("f ${a + 1} ${b + 1} ${d + 1}")
                            out.println("f ${d + 1} ${c + 1} ${a + 1}")
                        }
                    }
                }
            }
        }
        return true
    }
}